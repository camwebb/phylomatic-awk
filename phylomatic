#!/usr/bin/gawk -f

## Standalone phylomatic 

## Copyright (c) 2012-2021, Campbell Webb <cw@camwebb.info>

## Globals: parent[], bl[], taxon[], nDaughter[], hasBL, warning, rootNode
##   CLEAN

BEGIN{

  new2fyt()

  # printfyt()

  # CLEAN = 1
  phylomatic()

  #printfyt()

  fyt2new()


}

## ----- NEW2FYT ---------------------------------------------------------

function new2fyt(          newick, i, j , k, atn, iname, taxa, b) {

  RS="\x04"
  while ((getline < ARGV[1]) > 0)
    newick = $0
  if (!newick)
    error("Reading phylo file failed")
  
  gsub(/ \n\r/, "", newick)

  # checks
  if (gsub(/\(/,"(",newick) != gsub(/\)/,")",newick))
    error("Newick parse error: mismatched parentheses")
  if (!index(newick, ";") || !index(newick, "(") || !index(newick, ")") || \
      !index(newick, ","))
    error("Newick parse error: missing any ( , ) ; characters")
  if (newick ~ /:[0-9.-]+[eE][0-9-]+/)
    error("Branch lengths contain sci notation")
      
  j = k = -1
  rootNode = 0

  # MOVE THROUGHT THE NEWICK FORMAT TREE CHARACTER BY CHARACTER
  i = 1
  while (i < length(newick)) {
    # the end?
    if (substr(newick,i,1) == ";")
      break
    
    # descend a branch, create parent
    else if (substr(newick,i,1) == "(") {
      j++
      parent[j] = k
      taxon[j] = ""
      nDaughter[k]++
      k = j
      i++
    }
      
    # sibling taxa
    else if (substr(newick, i, 1) == ",")
      i++

    # back up a node to len, keep track of locn with atn
    else if (substr(newick, i, 1 ) == ")") {
      k = parent[k]
      atn = parent[atn]
      i++
    }

    # Interior name
    else if ((substr(newick, i, 1 ) ~ /[A-Za-z\-_\']/) &&   \
             (substr(newick, i-1, 1 ) == ")")) {
      iname = ""
          
      while(substr(newick, i, 1) !~ /[:,\)\[;]/) {
        iname = iname substr(newick, i, 1)
        i++
      }
      taxon[atn] = iname
    }

    # NOTE - IGNORE IT
    else if (substr(newick, i, 1 ) == "[")
      while(substr(newick, i-1, 1) !~ /\]/)
        i++
    
    # branch length coming up
    else if (substr(newick, i, 1 ) == ":") {
      b = ""
      i++
      while(substr(newick, i, 1) ~ /[0-9\.]/) {
        b = b substr(newick, i, 1)
        i++
      }
      if (b != "") {hasBL = 1}
      bl[atn] = b
    }

    # default - it's a new taxon name
    # TODO - fix this. anytime you find a non ,:;()[] character, check to 
    # see if previous VALID character is , or ). If it is, or if character
    # is ', begin a new taxon name. If it's not, ignore. This should handle
    # whitespace, newlines and other garbage (but non-fatal) characters 
    # that currently crash the input.
    else if ((substr(newick, i, 1 ) ~ /[A-Za-z\-_]\'/) &&    \
             (substr(newick, i-1, 1 ) ~ /[(,]/)) {
      taxa = ""
      taxa = taxa substr(newick, i, 1)
      i++
    
      # Keep adding more chars
      while ((substr(newick, i, 1) !~ /[,\):\[]/) &&    \
             (i < length(newick))) {
        taxa = taxa substr(newick, i, 1)
        i++
      }
          
      # A new name means a new node
      j++
      atn = j
      parent[j]     = k
      taxon[j] = taxa
      nDaughter[k]++
    }
    else i++
  }
  
  # Set the rootNode parent
  parent[0] = "-1"

}

## ----- PHYLOMATIC ---------------------------------------------------------

function phylomatic(       divbl, endbit, i, j, keep, kpd, matched, nodetmp, \
                           newnode, nkpd, nmatched, node, ntaxatrees, p, \
                           shiftedbl, thisnode, tobecleaned, x, xbl, z1, z2) {
  if (hasBL)
    ageToRoot()

  # READ TAXA
  RS="\x04"
  while ((getline < ARGV[2]) > 0)
    ftaxa = $0
  if (!ftaxa)
    error("Reading taxa file failed")
  
  # clean
  gsub(/\r\n/,"\n",ftaxa); # fix windows
  gsub(/\r/,"\n",ftaxa); # fix mac
  gsub(/\n\n*$/,"",ftaxa); # clean empty newlines at end
  gsub(/[ \t]/,"",ftaxa); # important - tabs were causing hangs
  # CHECK: spaces allowed in taxa names?

  ntaxatrees = split(ftaxa, taxa, "\n")
  if (ntaxatrees > 10000)
    error("More than 10,000 taxa. May take too long.\n"     \
          "  Comment out the relevant warning in source"\
          " if you really want to do this.")

  # GRAFT
  
  newnode = 1

  for (i = 1; i <= ntaxatrees; i++) {
    delete node
    # parse slashes
    nnodes = split(taxa[i], nodetmp, "/")
    # reverse the indices, so 1 is the terminal one
    for (j = 1; j <= nnodes; j++)
      node[nnodes - j+1] =  nodetmp[j]

    #  climb through the levels of nesting from terminal to basal
    for (j = 1; j <= nnodes; j++) {
      if (matched[i]) break
      
      # looping through all nodes in megatree that have taxa names
      for (k in taxon) {
        if (!taxon[k])
          continue

        # compare with the taxon name at every node in the megatree
        # case insensitive
        if (tolower(node[j]) == tolower(taxon[k])) {
          # print "found " taxon[k] " for t " i " j " j "/" nnodes "\n"
          #  if matches, add to megatree:
                  
          # terminal to terminal match:
          if ((nDaughter[k] == 0) && (j==1)) {
            # flag the existing node and break (no graft, just prune)
            keep[k] =1
            matched[i]=1
            nmatched++
            break
          }
          # grafting needed
          else {
            # deal with brach length adjustments
            if (hasBL) {
              if (nDaughter[k] == 0) {
                # need to shift the BL of tip
                ageNode(parent[k])
                divbl = age[parent[k]] / j
                if (!shiftedbl[k])    {
                  bl[k] = divbl
                  shiftedbl[k] = 1
                }
              }
              # internal match
              else {
                ageNode(k)
                divbl = age[k] / (j-1)
              }
            }

            x = k

            # starting with the node distal to the matched one
            for (p = j-1; p >= 1; p--) {
              thisnode = "pm" newnode
              if (hasBL) bl[thisnode] = divbl
              parent[thisnode] = x
              nDaughter[x]++
              taxon[thisnode] = node[p]
              if (p == 1) keep[thisnode] = 1
              x = thisnode
              newnode++
            }
            matched[i]=1
            nmatched++
            break
          }
        }
      } 
    }
  }

  if(!nmatched) error("No taxa in common")

  # AND PRUNE:
  for (i in parent) {
    # terminals only
    if ((nDaughter[i] == 0) && keep[i]) {
      j = i
      # move up through tree
      # WAS while ((parent[j] != "NULL") || (!parent[j])) {
      #  because the rootNode's parent was sometimes "" safer to use -1
      while (parent[j] != "-1") {
        # for possible cleaning (kpd = kept parent daughter)
        kpd[parent[j] , j]=1

        j = parent[j]
        keep[j]=1
      }
    }
    if (parent[j] == "-1") keep[j]=1
  }

  # now remove the elements not kept:
  # make sure only to reference arrays by looping in parent!

  for (i in parent)
    if (!keep[i]) delete parent[i]

  # Finally, if phy is to be cleaned:
  if (CLEAN) {
    # find nkpd for each node
    for (z1 in kpd) {
      split (z1 , z2, SUBSEP)
      # print " z2[1] " z2[1] "  z2[2] " z2[2] "\n"
      nkpd[z2[1]]++
    }

    for (i in parent) {
      if (!nDaughter[i]) {
        # print "node " i ", parent " parent[i] ", nkpd " nkpd[i] ", tax " taxon[i]
        
        j = i
        # move up through tree 
        while (parent[j] != "-1") {
          # print "  considering parent of " j " -> " parent[j] " taxon " taxon[parent[j]] "\n"
          x = parent[j]
          xbl = 0
          # if the parent node is to be cleaned
          while (nkpd[x] == 1) {
            tobecleaned = x
            xbl += bl[tobecleaned]
            x = parent[x]

            # print "    deleted " tobecleaned " taxon " taxon[tobecleaned] "\n"
            delete parent[tobecleaned]
          }
          parent[j] = x
          bl[j] += xbl
          j = parent[j]
        }
        # set new rootNode
        if (parent[j] == "-1") rootNode = j
      }
    }
    # NULL was added to the index of parent, clear it:
    delete parent["-1"]
  }


  # Missing taxa
  if (nmatched < ntaxatrees) {
    # if (f["outformat"] == "fyt") {
    #       warning = "----\nNOTE: " ntaxatrees - nmatched " taxa not matched:\n"
    #       endbit = "\n"
    # }
    # else {
    warning = "NOTE: " ntaxatrees - nmatched " taxa not matched: "
    endbit = ", "

    for (i = 1; i <= ntaxatrees; i++)
      if (!matched[i])
        warning = warning taxa[i] endbit
  }
}

function ageToRoot(     i, j) {
  totalBL = 0
  # assumes an ultrametric megatree
  for (i in parent) {
    # find the first term
    if (nDaughter[i] == 0) {
      j = i
      # move up through tree
      # WAS: while ((parent[j] != "NULL") || (!parent[j])) {
      while (parent[j] != "-1") {
        totalBL = totalBL + bl[j]
        j = parent[j]
      }
      break
    }
  }
}

function ageNode( innode,      j, sumBL)
{
  if (age[innode]) return
  else {
    j = innode
    # move up through tree
    while (parent[j] != "-1") {
      sumBL = sumBL + bl[j]
      j = parent[j]
    }
  }
  age[innode] = totalBL - sumBL
  # print "Age of " innode " is " age[innode] "\n"
}


function fyt2new(                 x , y, n, first , mark, tmp)  {
  # (c) 2011 Cam Webb

  # fyt2new (recursive version)
  # converts a tabular `fyt format phylogeny to Newick, parenthetical format

  # fyt-format = 4 tab-delimited string fields:
  #   1. nodeID
  #   2. parent node nodeID (must be either "-1", "", or "NULL" for rootNode node)
  #   3. branch length to parent node (an integer or float; missing for no BLs)
  #   4. node name (terminal or interior node)
  #   5. (optional) notes attached node

  # check for rootNode:
  if (rootNode == "")
    error("No rootNode found")

  # lDaughter, rSister needed for down-pass recursivity

  # initialize
  for (x in parent) {
    lDaughter[x] = "NULL"
    rSister[x] = "NULL"
    first[x] = 1
    n++
  }

  # special case of a single node:
  if (n == 1) {
    print taxon[x] ";"
    return
  }

  # create lDaughter, rSister
  for (x in parent) {
    # starting at terms
    if (!nDaughter[x]) {
      y = x
      # while not yet at the rootNode (allow diff coding schemes)
      while (y != rootNode) {
        # is this the first daughter?
        if (lDaughter[parent[y]] == "NULL") 
          lDaughter[parent[y]] = y
        # if not, find the dangling sister
        else {
          # start at lDaughter
          mark = lDaughter[parent[y]]
          # move to node with an empty rSister
          while (rSister[mark] != "NULL")
            mark = rSister[mark]
          rSister[mark] = y
        }
        
        # test for refollowing old routes
        if (first[parent[y]] == 1) {
          y = parent[y]
          first[y] = 0
        }
        else
          break
      }
    }
  }

  # Recurse through levels

  tmp = ""
  if (warning) 
    warning = "[" warning "]"
  
  print downPar(rootNode, tmp) warning

}

function downPar(atn, tmp,           x, which, tmpnext ) {
  which = 0

  # if terminal, go no further
  if (!nDaughter[atn]) {
    tmp = gensub(/ /,"_","G",taxon[atn])
    if ((hasBL) && ( bl[atn])) 
      tmp = tmp ":" bl[atn]
    if (note[atn])
      tmp = tmp "[" note[atn] "]" 
  }
  else {
    
    x = lDaughter[atn]
    tmp =  "("
    tmp = tmp downPar(x, tmpnext[which])
    
    x = rSister[x]; which++
    
    while (x != "NULL") {
      tmp = tmp  ","
      tmp = tmp downPar(x, tmpnext[which])
      x = rSister[x]; which++
    }
    tmp = tmp  ")"
    tmp = tmp  gensub(/ /,"_","G",taxon[atn])
    if ((hasBL) && ( bl[atn])) 
      tmp = tmp  ":" bl[atn]
    if (note[atn])
      tmp = tmp "[" note[atn] "]" 
  }
  
  return tmp
}

function printfyt(     i) {

  # n = asorti(parent, sortidx)   # old method
  # for (i = 1; i <= n; i++) {
  # print sortidx[i], parent[sortidx[i]],         \
  #   bl[sortidx[i]], taxon[sortidx[i]] }

  PROCINFO["sorted_in"] = "@ind_num_asc"
  OFS="|"
  for (i in parent)
    print i, parent[i], bl[i], taxon[i] # nDaughter[i],  
  
  if (warning)
    print warning "\n"
}

function error( msg ) {
  print "Error: " msg 
  exit 
}

